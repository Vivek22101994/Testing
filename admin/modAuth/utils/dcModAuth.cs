#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ContextGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using ModAuth;

namespace ModAuth	
{
	[NamingSettings(RemoveCamelCase = true, RemoveLeadingUnderscores = true, ResolveReservedWords = true, UseDelimitedSQL = true, WordBreak = "_")]
	public partial class DCmodAuth : OpenAccessContext, IDCmodAuthUnitOfWork
	{
		private static string connectionStringName = @"ModAuthDBConnection";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
				
		private static MetadataSource metadataSource = AttributesMetadataSource.FromContext(typeof(DCmodAuth));
		
		public DCmodAuth()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public DCmodAuth(string connection)
			:base(connection, backend, metadataSource)
		{ }
		
		public DCmodAuth(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public DCmodAuth(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public DCmodAuth(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IQueryable<dbAuthRoleTBL> dbAuthRoleTBLs 
		{
			get
			{
				return this.GetAll<dbAuthRoleTBL>();
			}
		}
		
		public IQueryable<dbAuthRolePermissionTBL> dbAuthRolePermissionTBLs 
		{
			get
			{
				return this.GetAll<dbAuthRolePermissionTBL>();
			}
		}
		
		public IQueryable<dbAuthPermissionLK> dbAuthPermissionLKs 
		{
			get
			{
				return this.GetAll<dbAuthPermissionLK>();
			}
		}
		
		public IQueryable<dbAuthDocTypeLK> dbAuthDocTypeLKs 
		{
			get
			{
				return this.GetAll<dbAuthDocTypeLK>();
			}
		}
		
		public IQueryable<dbAuthUserTBL> dbAuthUserTBLs 
		{
			get
			{
				return this.GetAll<dbAuthUserTBL>();
			}
		}
		
		public IQueryable<dbAuthCountryLK> dbAuthCountryLKs 
		{
			get
			{
				return this.GetAll<dbAuthCountryLK>();
			}
		}
		
		public IQueryable<dbAuthUserReportTBL> dbAuthUserReportTBLs 
		{
			get
			{
				return this.GetAll<dbAuthUserReportTBL>();
			}
		}
		
		public IQueryable<dbAuthClientTypeLK> dbAuthClientTypeLKs 
		{
			get
			{
				return this.GetAll<dbAuthClientTypeLK>();
			}
		}
		
		public IQueryable<dbAuthErrorLOG> dbAuthErrorLOGs 
		{
			get
			{
				return this.GetAll<dbAuthErrorLOG>();
			}
		}
		
		public IQueryable<dbAuthMailErrorLOG> dbAuthMailErrorLOGs 
		{
			get
			{
				return this.GetAll<dbAuthMailErrorLOG>();
			}
		}
		
		public IQueryable<dbAuthErrorSrsLOG> dbAuthErrorSrsLOGs 
		{
			get
			{
				return this.GetAll<dbAuthErrorSrsLOG>();
			}
		}
		
		public IQueryable<dbAuthErrorEcoLOG> dbAuthErrorEcoLOGs 
		{
			get
			{
				return this.GetAll<dbAuthErrorEcoLOG>();
			}
		}
		
		public IQueryable<dbAuthClientTBL> dbAuthClientTBLs 
		{
			get
			{
				return this.GetAll<dbAuthClientTBL>();
			}
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "mssql";
			backend.ProviderName = "System.Data.SqlClient";
		
			CustomizeBackendConfiguration(ref backend);
		
			return backend;
		}
		
		/// <summary>
		/// Allows you to customize the BackendConfiguration of DCmodAuth.
		/// </summary>
		/// <param name="config">The BackendConfiguration of DCmodAuth.</param>
		static partial void CustomizeBackendConfiguration(ref BackendConfiguration config);
		
	}
	
	public interface IDCmodAuthUnitOfWork : IUnitOfWork
	{
		IQueryable<dbAuthRoleTBL> dbAuthRoleTBLs
		{
			get;
		}
		IQueryable<dbAuthRolePermissionTBL> dbAuthRolePermissionTBLs
		{
			get;
		}
		IQueryable<dbAuthPermissionLK> dbAuthPermissionLKs
		{
			get;
		}
		IQueryable<dbAuthDocTypeLK> dbAuthDocTypeLKs
		{
			get;
		}
		IQueryable<dbAuthUserTBL> dbAuthUserTBLs
		{
			get;
		}
		IQueryable<dbAuthCountryLK> dbAuthCountryLKs
		{
			get;
		}
		IQueryable<dbAuthUserReportTBL> dbAuthUserReportTBLs
		{
			get;
		}
		IQueryable<dbAuthClientTypeLK> dbAuthClientTypeLKs
		{
			get;
		}
		IQueryable<dbAuthErrorLOG> dbAuthErrorLOGs
		{
			get;
		}
		IQueryable<dbAuthMailErrorLOG> dbAuthMailErrorLOGs
		{
			get;
		}
		IQueryable<dbAuthErrorSrsLOG> dbAuthErrorSrsLOGs
		{
			get;
		}
		IQueryable<dbAuthErrorEcoLOG> dbAuthErrorEcoLOGs
		{
			get;
		}
		IQueryable<dbAuthClientTBL> dbAuthClientTBLs
		{
			get;
		}
	}
}
namespace ModAuth	
{
	[Table("AuthRoleTBL")]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class dbAuthRoleTBL
	{
		private int id1;
		[Column("id", OpenAccessType = OpenAccessType.Int32, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("id1")]
		public virtual int id
		{
			get
			{
				return this.id1;
			}
			set
			{
				this.id1 = value;
			}
		}
		
		private string title1;
		[Column("title", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 50, Scale = 0, SqlType = "nvarchar")]
		[Storage("title1")]
		public virtual string title
		{
			get
			{
				return this.title1;
			}
			set
			{
				this.title1 = value;
			}
		}
		
		private string notesInner1;
		[Column("notesInner", OpenAccessType = OpenAccessType.Clob, IsNullable = true, Length = 0, Scale = 0, SqlType = "ntext")]
		[Storage("notesInner1")]
		public virtual string notesInner
		{
			get
			{
				return this.notesInner1;
			}
			set
			{
				this.notesInner1 = value;
			}
		}
		
	}
}
namespace ModAuth	
{
	[Table("AuthRolePermissionTBL")]
	public partial class dbAuthRolePermissionTBL
	{
		private int pidRole1;
		[Column("pidRole", OpenAccessType = OpenAccessType.Int32, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("pidRole1")]
		public virtual int pidRole
		{
			get
			{
				return this.pidRole1;
			}
			set
			{
				this.pidRole1 = value;
			}
		}
		
		private string permission1;
		[Column("permission", OpenAccessType = OpenAccessType.Varchar, IsPrimaryKey = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("permission1")]
		public virtual string permission
		{
			get
			{
				return this.permission1;
			}
			set
			{
				this.permission1 = value;
			}
		}
		
		private int? canEdit1;
		[Column("canEdit", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("canEdit1")]
		public virtual int? canEdit
		{
			get
			{
				return this.canEdit1;
			}
			set
			{
				this.canEdit1 = value;
			}
		}
		
		private int? canCreate1;
		[Column("canCreate", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("canCreate1")]
		public virtual int? canCreate
		{
			get
			{
				return this.canCreate1;
			}
			set
			{
				this.canCreate1 = value;
			}
		}
		
		private int? canDelete1;
		[Column("canDelete", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("canDelete1")]
		public virtual int? canDelete
		{
			get
			{
				return this.canDelete1;
			}
			set
			{
				this.canDelete1 = value;
			}
		}
		
	}
}
namespace ModAuth	
{
	[Table("AuthPermissionLK")]
	public partial class dbAuthPermissionLK
	{
		private string code1;
		[Column("code", OpenAccessType = OpenAccessType.Varchar, IsPrimaryKey = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("code1")]
		public virtual string code
		{
			get
			{
				return this.code1;
			}
			set
			{
				this.code1 = value;
			}
		}
		
		private string title1;
		[Column("title", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 100, Scale = 0, SqlType = "nvarchar")]
		[Storage("title1")]
		public virtual string title
		{
			get
			{
				return this.title1;
			}
			set
			{
				this.title1 = value;
			}
		}
		
		private string notesInner1;
		[Column("notesInner", OpenAccessType = OpenAccessType.Clob, IsNullable = true, Length = 0, Scale = 0, SqlType = "ntext")]
		[Storage("notesInner1")]
		public virtual string notesInner
		{
			get
			{
				return this.notesInner1;
			}
			set
			{
				this.notesInner1 = value;
			}
		}
		
	}
}
namespace ModAuth	
{
	[Table("AuthDocTypeLK")]
	public partial class dbAuthDocTypeLK
	{
		private string title1;
		[Column("title", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 100, Scale = 0, SqlType = "nvarchar")]
		[Storage("title1")]
		public virtual string title
		{
			get
			{
				return this.title1;
			}
			set
			{
				this.title1 = value;
			}
		}
		
		private string notesInner1;
		[Column("notesInner", OpenAccessType = OpenAccessType.Clob, IsNullable = true, Length = 0, Scale = 0, SqlType = "ntext")]
		[Storage("notesInner1")]
		public virtual string notesInner
		{
			get
			{
				return this.notesInner1;
			}
			set
			{
				this.notesInner1 = value;
			}
		}
		
		private string code1;
		[Column("code", OpenAccessType = OpenAccessType.Varchar, IsPrimaryKey = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("code1")]
		public virtual string code
		{
			get
			{
				return this.code1;
			}
			set
			{
				this.code1 = value;
			}
		}
		
	}
}
namespace ModAuth	
{
	[Table("AuthUserTBL")]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class dbAuthUserTBL
	{
		private Guid uid1;
		[Column("uid", OpenAccessType = OpenAccessType.Guid, Length = 0, Scale = 0, SqlType = "uniqueidentifier")]
		[Storage("uid1")]
		public virtual Guid uid
		{
			get
			{
				return this.uid1;
			}
			set
			{
				this.uid1 = value;
			}
		}
		
		private int? pidRole1;
		[Column("pidRole", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("pidRole1")]
		public virtual int? pidRole
		{
			get
			{
				return this.pidRole1;
			}
			set
			{
				this.pidRole1 = value;
			}
		}
		
		private string phoneMobile1;
		[Column("phoneMobile", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("phoneMobile1")]
		public virtual string phoneMobile
		{
			get
			{
				return this.phoneMobile1;
			}
			set
			{
				this.phoneMobile1 = value;
			}
		}
		
		private string phone1;
		[Column("phone", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("phone1")]
		public virtual string phone
		{
			get
			{
				return this.phone1;
			}
			set
			{
				this.phone1 = value;
			}
		}
		
		private string password1;
		[Column("password", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("password1")]
		public virtual string password
		{
			get
			{
				return this.password1;
			}
			set
			{
				this.password1 = value;
			}
		}
		
		private string nameFull1;
		[Column("nameFull", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 100, Scale = 0, SqlType = "nvarchar")]
		[Storage("nameFull1")]
		public virtual string nameFull
		{
			get
			{
				return this.nameFull1;
			}
			set
			{
				this.nameFull1 = value;
			}
		}
		
		private string login1;
		[Column("login", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("login1")]
		public virtual string login
		{
			get
			{
				return this.login1;
			}
			set
			{
				this.login1 = value;
			}
		}
		
		private int? isActive1;
		[Column("isActive", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("isActive1")]
		public virtual int? isActive
		{
			get
			{
				return this.isActive1;
			}
			set
			{
				this.isActive1 = value;
			}
		}
		
		private int id1;
		[Column("id", OpenAccessType = OpenAccessType.Int32, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("id1")]
		public virtual int id
		{
			get
			{
				return this.id1;
			}
			set
			{
				this.id1 = value;
			}
		}
		
		private string email1;
		[Column("email", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("email1")]
		public virtual string email
		{
			get
			{
				return this.email1;
			}
			set
			{
				this.email1 = value;
			}
		}
		
	}
}
namespace ModAuth	
{
	[Table("AuthCountryLK")]
	public partial class dbAuthCountryLK
	{
		private string title1;
		[Column("title", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 100, Scale = 0, SqlType = "nvarchar")]
		[Storage("title1")]
		public virtual string title
		{
			get
			{
				return this.title1;
			}
			set
			{
				this.title1 = value;
			}
		}
		
		private int id1;
		[Column("id", OpenAccessType = OpenAccessType.Int32, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("id1")]
		public virtual int id
		{
			get
			{
				return this.id1;
			}
			set
			{
				this.id1 = value;
			}
		}
		
		private string code1;
		[Column("code", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("code1")]
		public virtual string code
		{
			get
			{
				return this.code1;
			}
			set
			{
				this.code1 = value;
			}
		}
		
	}
}
namespace ModAuth	
{
	[Table("AuthUserReportTBL")]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class dbAuthUserReportTBL
	{
		private Guid? uid1;
		[Column("uid", OpenAccessType = OpenAccessType.Guid, IsNullable = true, Length = 0, Scale = 0, SqlType = "uniqueidentifier")]
		[Storage("uid1")]
		public virtual Guid? uid
		{
			get
			{
				return this.uid1;
			}
			set
			{
				this.uid1 = value;
			}
		}
		
		private string repType1;
		[Column("repType", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("repType1")]
		public virtual string repType
		{
			get
			{
				return this.repType1;
			}
			set
			{
				this.repType1 = value;
			}
		}
		
		private string repTitle1;
		[Column("repTitle", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 100, Scale = 0, SqlType = "nvarchar")]
		[Storage("repTitle1")]
		public virtual string repTitle
		{
			get
			{
				return this.repTitle1;
			}
			set
			{
				this.repTitle1 = value;
			}
		}
		
		private string repDesc1;
		[Column("repDesc", OpenAccessType = OpenAccessType.Clob, IsNullable = true, Length = 0, Scale = 0, SqlType = "ntext")]
		[Storage("repDesc1")]
		public virtual string repDesc
		{
			get
			{
				return this.repDesc1;
			}
			set
			{
				this.repDesc1 = value;
			}
		}
		
		private DateTime? repDateTime1;
		[Column("repDateTime", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("repDateTime1")]
		public virtual DateTime? repDateTime
		{
			get
			{
				return this.repDateTime1;
			}
			set
			{
				this.repDateTime1 = value;
			}
		}
		
		private int? pidUser1;
		[Column("pidUser", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("pidUser1")]
		public virtual int? pidUser
		{
			get
			{
				return this.pidUser1;
			}
			set
			{
				this.pidUser1 = value;
			}
		}
		
		private long id1;
		[Column("id", OpenAccessType = OpenAccessType.Int64, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "bigint")]
		[Storage("id1")]
		public virtual long id
		{
			get
			{
				return this.id1;
			}
			set
			{
				this.id1 = value;
			}
		}
		
		private string createdUserNameFull1;
		[Column("createdUserNameFull", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 200, Scale = 0, SqlType = "nvarchar")]
		[Storage("createdUserNameFull1")]
		public virtual string createdUserNameFull
		{
			get
			{
				return this.createdUserNameFull1;
			}
			set
			{
				this.createdUserNameFull1 = value;
			}
		}
		
		private int? createdUserID1;
		[Column("createdUserID", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("createdUserID1")]
		public virtual int? createdUserID
		{
			get
			{
				return this.createdUserID1;
			}
			set
			{
				this.createdUserID1 = value;
			}
		}
		
		private DateTime? createdDate1;
		[Column("createdDate", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("createdDate1")]
		public virtual DateTime? createdDate
		{
			get
			{
				return this.createdDate1;
			}
			set
			{
				this.createdDate1 = value;
			}
		}
		
		private string code1;
		[Column("code", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("code1")]
		public virtual string code
		{
			get
			{
				return this.code1;
			}
			set
			{
				this.code1 = value;
			}
		}
		
	}
}
namespace ModAuth	
{
	[Table("AuthClientTypeLK")]
	public partial class dbAuthClientTypeLK
	{
		private string title1;
		[Column("title", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 100, Scale = 0, SqlType = "nvarchar")]
		[Storage("title1")]
		public virtual string title
		{
			get
			{
				return this.title1;
			}
			set
			{
				this.title1 = value;
			}
		}
		
		private int? isActive1;
		[Column("isActive", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("isActive1")]
		public virtual int? isActive
		{
			get
			{
				return this.isActive1;
			}
			set
			{
				this.isActive1 = value;
			}
		}
		
		private string code1;
		[Column("code", OpenAccessType = OpenAccessType.Varchar, IsPrimaryKey = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("code1")]
		public virtual string code
		{
			get
			{
				return this.code1;
			}
			set
			{
				this.code1 = value;
			}
		}
		
	}
}
namespace ModAuth	
{
	[Table("AuthErrorLOG")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Guid)]
	public partial class dbAuthErrorLOG
	{
		private Guid uid1;
		[Column("uid", OpenAccessType = OpenAccessType.Guid, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "uniqueidentifier")]
		[Storage("uid1")]
		public virtual Guid uid
		{
			get
			{
				return this.uid1;
			}
			set
			{
				this.uid1 = value;
			}
		}
		
		private string logUrl1;
		[Column("logUrl", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 500, Scale = 0, SqlType = "nvarchar")]
		[Storage("logUrl1")]
		public virtual string logUrl
		{
			get
			{
				return this.logUrl1;
			}
			set
			{
				this.logUrl1 = value;
			}
		}
		
		private string logIp1;
		[Column("logIp", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("logIp1")]
		public virtual string logIp
		{
			get
			{
				return this.logIp1;
			}
			set
			{
				this.logIp1 = value;
			}
		}
		
		private DateTime? logDateTime1;
		[Column("logDateTime", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("logDateTime1")]
		public virtual DateTime? logDateTime
		{
			get
			{
				return this.logDateTime1;
			}
			set
			{
				this.logDateTime1 = value;
			}
		}
		
		private string errorType1;
		[Column("errorType", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("errorType1")]
		public virtual string errorType
		{
			get
			{
				return this.errorType1;
			}
			set
			{
				this.errorType1 = value;
			}
		}
		
		private string errorContent1;
		[Column("errorContent", OpenAccessType = OpenAccessType.Clob, IsNullable = true, Length = 0, Scale = 0, SqlType = "ntext")]
		[Storage("errorContent1")]
		public virtual string errorContent
		{
			get
			{
				return this.errorContent1;
			}
			set
			{
				this.errorContent1 = value;
			}
		}
		
	}
}
namespace ModAuth	
{
	[Table("AuthMailErrorLOG")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Guid)]
	public partial class dbAuthMailErrorLOG
	{
		private Guid uid1;
		[Column("uid", OpenAccessType = OpenAccessType.Guid, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "uniqueidentifier")]
		[Storage("uid1")]
		public virtual Guid uid
		{
			get
			{
				return this.uid1;
			}
			set
			{
				this.uid1 = value;
			}
		}
		
		private string mailTOs1;
		[Column("mailTOs", OpenAccessType = OpenAccessType.Clob, IsNullable = true, Length = 0, Scale = 0, SqlType = "ntext")]
		[Storage("mailTOs1")]
		public virtual string mailTOs
		{
			get
			{
				return this.mailTOs1;
			}
			set
			{
				this.mailTOs1 = value;
			}
		}
		
		private string mailSubject1;
		[Column("mailSubject", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 500, Scale = 0, SqlType = "nvarchar")]
		[Storage("mailSubject1")]
		public virtual string mailSubject
		{
			get
			{
				return this.mailSubject1;
			}
			set
			{
				this.mailSubject1 = value;
			}
		}
		
		private int? mailIsResent1;
		[Column("mailIsResent", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("mailIsResent1")]
		public virtual int? mailIsResent
		{
			get
			{
				return this.mailIsResent1;
			}
			set
			{
				this.mailIsResent1 = value;
			}
		}
		
		private string mailDetails1;
		[Column("mailDetails", OpenAccessType = OpenAccessType.Clob, IsNullable = true, Length = 0, Scale = 0, SqlType = "ntext")]
		[Storage("mailDetails1")]
		public virtual string mailDetails
		{
			get
			{
				return this.mailDetails1;
			}
			set
			{
				this.mailDetails1 = value;
			}
		}
		
		private string mailDescrtiption1;
		[Column("mailDescrtiption", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 500, Scale = 0, SqlType = "nvarchar")]
		[Storage("mailDescrtiption1")]
		public virtual string mailDescrtiption
		{
			get
			{
				return this.mailDescrtiption1;
			}
			set
			{
				this.mailDescrtiption1 = value;
			}
		}
		
		private string mailCCs1;
		[Column("mailCCs", OpenAccessType = OpenAccessType.Clob, IsNullable = true, Length = 0, Scale = 0, SqlType = "ntext")]
		[Storage("mailCCs1")]
		public virtual string mailCCs
		{
			get
			{
				return this.mailCCs1;
			}
			set
			{
				this.mailCCs1 = value;
			}
		}
		
		private string mailBody1;
		[Column("mailBody", OpenAccessType = OpenAccessType.Clob, IsNullable = true, Length = 0, Scale = 0, SqlType = "ntext")]
		[Storage("mailBody1")]
		public virtual string mailBody
		{
			get
			{
				return this.mailBody1;
			}
			set
			{
				this.mailBody1 = value;
			}
		}
		
		private bool? mailBcc1;
		[Column("mailBcc", OpenAccessType = OpenAccessType.Bit, IsNullable = true, Length = 0, Scale = 0, SqlType = "bit")]
		[Storage("mailBcc1")]
		public virtual bool? mailBcc
		{
			get
			{
				return this.mailBcc1;
			}
			set
			{
				this.mailBcc1 = value;
			}
		}
		
		private string mailAttachments1;
		[Column("mailAttachments", OpenAccessType = OpenAccessType.Clob, IsNullable = true, Length = 0, Scale = 0, SqlType = "ntext")]
		[Storage("mailAttachments1")]
		public virtual string mailAttachments
		{
			get
			{
				return this.mailAttachments1;
			}
			set
			{
				this.mailAttachments1 = value;
			}
		}
		
		private string logIp1;
		[Column("logIp", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("logIp1")]
		public virtual string logIp
		{
			get
			{
				return this.logIp1;
			}
			set
			{
				this.logIp1 = value;
			}
		}
		
		private DateTime? logDateTime1;
		[Column("logDateTime", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("logDateTime1")]
		public virtual DateTime? logDateTime
		{
			get
			{
				return this.logDateTime1;
			}
			set
			{
				this.logDateTime1 = value;
			}
		}
		
		private string errorContent1;
		[Column("errorContent", OpenAccessType = OpenAccessType.Clob, IsNullable = true, Length = 0, Scale = 0, SqlType = "ntext")]
		[Storage("errorContent1")]
		public virtual string errorContent
		{
			get
			{
				return this.errorContent1;
			}
			set
			{
				this.errorContent1 = value;
			}
		}
		
		private string mailFromName1;
		[Column("mailFromName", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 500, Scale = 0, SqlType = "nvarchar")]
		[Storage("mailFromName1")]
		public virtual string mailFromName
		{
			get
			{
				return this.mailFromName1;
			}
			set
			{
				this.mailFromName1 = value;
			}
		}
		
		private string mailFromEmail1;
		[Column("mailFromEmail", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 500, Scale = 0, SqlType = "nvarchar")]
		[Storage("mailFromEmail1")]
		public virtual string mailFromEmail
		{
			get
			{
				return this.mailFromEmail1;
			}
			set
			{
				this.mailFromEmail1 = value;
			}
		}
		
	}
}
namespace ModAuth	
{
	[Table("AuthErrorSrsLOG")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class dbAuthErrorSrsLOG
	{
		private Guid uid1;
		[Column("uid", OpenAccessType = OpenAccessType.Guid, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "uniqueidentifier")]
		[Storage("uid1")]
		public virtual Guid uid
		{
			get
			{
				return this.uid1;
			}
			set
			{
				this.uid1 = value;
			}
		}
		
		private DateTime? logDateTime1;
		[Column("logDateTime", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("logDateTime1")]
		public virtual DateTime? logDateTime
		{
			get
			{
				return this.logDateTime1;
			}
			set
			{
				this.logDateTime1 = value;
			}
		}
		
		private string logIp1;
		[Column("logIp", OpenAccessType = OpenAccessType.StringVariableLength, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("logIp1")]
		public virtual string logIp
		{
			get
			{
				return this.logIp1;
			}
			set
			{
				this.logIp1 = value;
			}
		}
		
		private string logUrl1;
		[Column("logUrl", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, IsNullable = true, Length = 500, Scale = 0, SqlType = "nvarchar")]
		[Storage("logUrl1")]
		public virtual string logUrl
		{
			get
			{
				return this.logUrl1;
			}
			set
			{
				this.logUrl1 = value;
			}
		}
		
		private string errorType1;
		[Column("errorType", OpenAccessType = OpenAccessType.StringVariableLength, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("errorType1")]
		public virtual string errorType
		{
			get
			{
				return this.errorType1;
			}
			set
			{
				this.errorType1 = value;
			}
		}
		
		private string errorContent1;
		[Column("errorContent", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "ntext")]
		[Storage("errorContent1")]
		public virtual string errorContent
		{
			get
			{
				return this.errorContent1;
			}
			set
			{
				this.errorContent1 = value;
			}
		}
		
	}
}
namespace ModAuth	
{
	[Table("AuthErrorEcoLOG")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class dbAuthErrorEcoLOG
	{
		private Guid uid1;
		[Column("uid", OpenAccessType = OpenAccessType.Guid, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "uniqueidentifier")]
		[Storage("uid1")]
		public virtual Guid uid
		{
			get
			{
				return this.uid1;
			}
			set
			{
				this.uid1 = value;
			}
		}
		
		private DateTime? logDateTime1;
		[Column("logDateTime", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("logDateTime1")]
		public virtual DateTime? logDateTime
		{
			get
			{
				return this.logDateTime1;
			}
			set
			{
				this.logDateTime1 = value;
			}
		}
		
		private string logIp1;
		[Column("logIp", OpenAccessType = OpenAccessType.StringVariableLength, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("logIp1")]
		public virtual string logIp
		{
			get
			{
				return this.logIp1;
			}
			set
			{
				this.logIp1 = value;
			}
		}
		
		private string logUrl1;
		[Column("logUrl", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, IsNullable = true, Length = 500, Scale = 0, SqlType = "nvarchar")]
		[Storage("logUrl1")]
		public virtual string logUrl
		{
			get
			{
				return this.logUrl1;
			}
			set
			{
				this.logUrl1 = value;
			}
		}
		
		private string errorType1;
		[Column("errorType", OpenAccessType = OpenAccessType.StringVariableLength, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("errorType1")]
		public virtual string errorType
		{
			get
			{
				return this.errorType1;
			}
			set
			{
				this.errorType1 = value;
			}
		}
		
		private string errorContent1;
		[Column("errorContent", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "ntext")]
		[Storage("errorContent1")]
		public virtual string errorContent
		{
			get
			{
				return this.errorContent1;
			}
			set
			{
				this.errorContent1 = value;
			}
		}
		
	}
}
namespace ModAuth	
{
	[Table("AuthClientTBL")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class dbAuthClientTBL
	{
		private long id1;
		[Column("id", OpenAccessType = OpenAccessType.Int64, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "bigint")]
		[Storage("id1")]
		public virtual long id
		{
			get
			{
				return this.id1;
			}
			set
			{
				this.id1 = value;
			}
		}
		
		private Guid uid1;
		[Column("uid", OpenAccessType = OpenAccessType.Guid, Length = 0, Scale = 0, SqlType = "uniqueidentifier")]
		[Storage("uid1")]
		public virtual Guid uid
		{
			get
			{
				return this.uid1;
			}
			set
			{
				this.uid1 = value;
			}
		}
		
		private string code1;
		[Column("code", OpenAccessType = OpenAccessType.StringVariableLength, IsNullable = true, Length = 100, Scale = 0, SqlType = "varchar")]
		[Storage("code1")]
		public virtual string code
		{
			get
			{
				return this.code1;
			}
			set
			{
				this.code1 = value;
			}
		}
		
		private string typeCode1;
		[Column("typeCode", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, IsNullable = true, Length = 50, Scale = 0, SqlType = "nvarchar")]
		[Storage("typeCode1")]
		public virtual string typeCode
		{
			get
			{
				return this.typeCode1;
			}
			set
			{
				this.typeCode1 = value;
			}
		}
		
		private string pidLang1;
		[Column("pidLang", OpenAccessType = OpenAccessType.StringVariableLength, IsNullable = true, Length = 2, Scale = 0, SqlType = "varchar")]
		[Storage("pidLang1")]
		public virtual string pidLang
		{
			get
			{
				return this.pidLang1;
			}
			set
			{
				this.pidLang1 = value;
			}
		}
		
		private string authUsr1;
		[Column("authUsr", OpenAccessType = OpenAccessType.StringVariableLength, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("authUsr1")]
		public virtual string authUsr
		{
			get
			{
				return this.authUsr1;
			}
			set
			{
				this.authUsr1 = value;
			}
		}
		
		private string authPwd1;
		[Column("authPwd", OpenAccessType = OpenAccessType.StringVariableLength, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("authPwd1")]
		public virtual string authPwd
		{
			get
			{
				return this.authPwd1;
			}
			set
			{
				this.authPwd1 = value;
			}
		}
		
		private string nameHonorific1;
		[Column("nameHonorific", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("nameHonorific1")]
		public virtual string nameHonorific
		{
			get
			{
				return this.nameHonorific1;
			}
			set
			{
				this.nameHonorific1 = value;
			}
		}
		
		private string nameFull1;
		[Column("nameFull", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("nameFull1")]
		public virtual string nameFull
		{
			get
			{
				return this.nameFull1;
			}
			set
			{
				this.nameFull1 = value;
			}
		}
		
		private string nameFirst1;
		[Column("nameFirst", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("nameFirst1")]
		public virtual string nameFirst
		{
			get
			{
				return this.nameFirst1;
			}
			set
			{
				this.nameFirst1 = value;
			}
		}
		
		private string nameMiddle1;
		[Column("nameMiddle", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("nameMiddle1")]
		public virtual string nameMiddle
		{
			get
			{
				return this.nameMiddle1;
			}
			set
			{
				this.nameMiddle1 = value;
			}
		}
		
		private string nameLast1;
		[Column("nameLast", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("nameLast1")]
		public virtual string nameLast
		{
			get
			{
				return this.nameLast1;
			}
			set
			{
				this.nameLast1 = value;
			}
		}
		
		private string contactEmail1;
		[Column("contactEmail", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("contactEmail1")]
		public virtual string contactEmail
		{
			get
			{
				return this.contactEmail1;
			}
			set
			{
				this.contactEmail1 = value;
			}
		}
		
		private string contactPhone1;
		[Column("contactPhone", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("contactPhone1")]
		public virtual string contactPhone
		{
			get
			{
				return this.contactPhone1;
			}
			set
			{
				this.contactPhone1 = value;
			}
		}
		
		private string contactPhoneTrip1;
		[Column("contactPhoneTrip", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("contactPhoneTrip1")]
		public virtual string contactPhoneTrip
		{
			get
			{
				return this.contactPhoneTrip1;
			}
			set
			{
				this.contactPhoneTrip1 = value;
			}
		}
		
		private string contactPhoneMobile1;
		[Column("contactPhoneMobile", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("contactPhoneMobile1")]
		public virtual string contactPhoneMobile
		{
			get
			{
				return this.contactPhoneMobile1;
			}
			set
			{
				this.contactPhoneMobile1 = value;
			}
		}
		
		private string contactPhoneOffice1;
		[Column("contactPhoneOffice", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("contactPhoneOffice1")]
		public virtual string contactPhoneOffice
		{
			get
			{
				return this.contactPhoneOffice1;
			}
			set
			{
				this.contactPhoneOffice1 = value;
			}
		}
		
		private string contactFax1;
		[Column("contactFax", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("contactFax1")]
		public virtual string contactFax
		{
			get
			{
				return this.contactFax1;
			}
			set
			{
				this.contactFax1 = value;
			}
		}
		
		private string docType1;
		[Column("docType", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("docType1")]
		public virtual string docType
		{
			get
			{
				return this.docType1;
			}
			set
			{
				this.docType1 = value;
			}
		}
		
		private string docNum1;
		[Column("docNum", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("docNum1")]
		public virtual string docNum
		{
			get
			{
				return this.docNum1;
			}
			set
			{
				this.docNum1 = value;
			}
		}
		
		private string docIssuePlace1;
		[Column("docIssuePlace", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("docIssuePlace1")]
		public virtual string docIssuePlace
		{
			get
			{
				return this.docIssuePlace1;
			}
			set
			{
				this.docIssuePlace1 = value;
			}
		}
		
		private DateTime? docIssueDate1;
		[Column("docIssueDate", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("docIssueDate1")]
		public virtual DateTime? docIssueDate
		{
			get
			{
				return this.docIssueDate1;
			}
			set
			{
				this.docIssueDate1 = value;
			}
		}
		
		private DateTime? docExpiryDate1;
		[Column("docExpiryDate", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("docExpiryDate1")]
		public virtual DateTime? docExpiryDate
		{
			get
			{
				return this.docExpiryDate1;
			}
			set
			{
				this.docExpiryDate1 = value;
			}
		}
		
		private string docVat1;
		[Column("docVat", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("docVat1")]
		public virtual string docVat
		{
			get
			{
				return this.docVat1;
			}
			set
			{
				this.docVat1 = value;
			}
		}
		
		private string docCf1;
		[Column("docCf", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("docCf1")]
		public virtual string docCf
		{
			get
			{
				return this.docCf1;
			}
			set
			{
				this.docCf1 = value;
			}
		}
		
		private DateTime? birthDate1;
		[Column("birthDate", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("birthDate1")]
		public virtual DateTime? birthDate
		{
			get
			{
				return this.birthDate1;
			}
			set
			{
				this.birthDate1 = value;
			}
		}
		
		private string birthPlace1;
		[Column("birthPlace", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("birthPlace1")]
		public virtual string birthPlace
		{
			get
			{
				return this.birthPlace1;
			}
			set
			{
				this.birthPlace1 = value;
			}
		}
		
		private string birthCountry1;
		[Column("birthCountry", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("birthCountry1")]
		public virtual string birthCountry
		{
			get
			{
				return this.birthCountry1;
			}
			set
			{
				this.birthCountry1 = value;
			}
		}
		
		private string birthState1;
		[Column("birthState", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("birthState1")]
		public virtual string birthState
		{
			get
			{
				return this.birthState1;
			}
			set
			{
				this.birthState1 = value;
			}
		}
		
		private string locCountry1;
		[Column("locCountry", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("locCountry1")]
		public virtual string locCountry
		{
			get
			{
				return this.locCountry1;
			}
			set
			{
				this.locCountry1 = value;
			}
		}
		
		private string locState1;
		[Column("locState", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("locState1")]
		public virtual string locState
		{
			get
			{
				return this.locState1;
			}
			set
			{
				this.locState1 = value;
			}
		}
		
		private string locCity1;
		[Column("locCity", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("locCity1")]
		public virtual string locCity
		{
			get
			{
				return this.locCity1;
			}
			set
			{
				this.locCity1 = value;
			}
		}
		
		private string locAddress1;
		[Column("locAddress", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("locAddress1")]
		public virtual string locAddress
		{
			get
			{
				return this.locAddress1;
			}
			set
			{
				this.locAddress1 = value;
			}
		}
		
		private string locZipCode1;
		[Column("locZipCode", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("locZipCode1")]
		public virtual string locZipCode
		{
			get
			{
				return this.locZipCode1;
			}
			set
			{
				this.locZipCode1 = value;
			}
		}
		
		private int? isActive1;
		[Column("isActive", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("isActive1")]
		public virtual int? isActive
		{
			get
			{
				return this.isActive1;
			}
			set
			{
				this.isActive1 = value;
			}
		}
		
		private DateTime? createdDate1;
		[Column("createdDate", OpenAccessType = OpenAccessType.DateTime, IsNullable = true, Length = 0, Scale = 0, SqlType = "datetime")]
		[Storage("createdDate1")]
		public virtual DateTime? createdDate
		{
			get
			{
				return this.createdDate1;
			}
			set
			{
				this.createdDate1 = value;
			}
		}
		
		private int? createdUserID1;
		[Column("createdUserID", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("createdUserID1")]
		public virtual int? createdUserID
		{
			get
			{
				return this.createdUserID1;
			}
			set
			{
				this.createdUserID1 = value;
			}
		}
		
		private string createdUserNameFull1;
		[Column("createdUserNameFull", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("createdUserNameFull1")]
		public virtual string createdUserNameFull
		{
			get
			{
				return this.createdUserNameFull1;
			}
			set
			{
				this.createdUserNameFull1 = value;
			}
		}
		
		private string notesInner1;
		[Column("notesInner", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "ntext")]
		[Storage("notesInner1")]
		public virtual string notesInner
		{
			get
			{
				return this.notesInner1;
			}
			set
			{
				this.notesInner1 = value;
			}
		}
		
		private string notesInvoice1;
		[Column("notesInvoice", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, IsNullable = true, Length = 0, Scale = 0, SqlType = "ntext")]
		[Storage("notesInvoice1")]
		public virtual string notesInvoice
		{
			get
			{
				return this.notesInvoice1;
			}
			set
			{
				this.notesInvoice1 = value;
			}
		}
		
		private long? pidAgent1;
		[Column("pidAgent", OpenAccessType = OpenAccessType.Int64, IsNullable = true, Length = 0, Scale = 0, SqlType = "bigint")]
		[Storage("pidAgent1")]
		public virtual long? pidAgent
		{
			get
			{
				return this.pidAgent1;
			}
			set
			{
				this.pidAgent1 = value;
			}
		}
		
		private string locProvince1;
		[Column("locProvince", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, IsNullable = true, Length = 10, Scale = 0, SqlType = "nvarchar")]
		[Storage("locProvince1")]
		public virtual string locProvince
		{
			get
			{
				return this.locProvince1;
			}
			set
			{
				this.locProvince1 = value;
			}
		}
		
		private string idCodice1;
		[Column("idCodice", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, IsNullable = true, Length = 50, Scale = 0, SqlType = "nvarchar")]
		[Storage("idCodice1")]
		public virtual string idCodice
		{
			get
			{
				return this.idCodice1;
			}
			set
			{
				this.idCodice1 = value;
			}
		}
		
	}
}
#pragma warning restore 1591

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ContextGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using ModAppServerCommon;

namespace ModAppServerCommon	
{
	[NamingSettings(RemoveCamelCase = true, RemoveLeadingUnderscores = true, ResolveReservedWords = true, UseDelimitedSQL = true, WordBreak = "_")]
	public partial class DCmodAppServerCommon : OpenAccessContext, IDCmodAppServerCommonUnitOfWork
	{
		private static string connectionStringName = @"ModAppServerCommonDBConnection";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
				
		private static MetadataSource metadataSource = AttributesMetadataSource.FromContext(typeof(DCmodAppServerCommon));
		
		public DCmodAppServerCommon()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public DCmodAppServerCommon(string connection)
			:base(connection, backend, metadataSource)
		{ }
		
		public DCmodAppServerCommon(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public DCmodAppServerCommon(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public DCmodAppServerCommon(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IQueryable<dbUtlsBlockedIpLST> dbUtlsBlockedIpLSTs 
		{
			get
			{
				return this.GetAll<dbUtlsBlockedIpLST>();
			}
		}
		
		public IQueryable<dbSmtpConfigLST> dbSmtpConfigLSTs 
		{
			get
			{
				return this.GetAll<dbSmtpConfigLST>();
			}
		}
		
		public IQueryable<dbRntChnlHomeAwayManagerTBL> dbRntChnlHomeAwayManagerTBLs 
		{
			get
			{
				return this.GetAll<dbRntChnlHomeAwayManagerTBL>();
			}
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "mssql";
			backend.ProviderName = "System.Data.SqlClient";
		
			CustomizeBackendConfiguration(ref backend);
		
			return backend;
		}
		
		/// <summary>
		/// Allows you to customize the BackendConfiguration of DCmodAppServerCommon.
		/// </summary>
		/// <param name="config">The BackendConfiguration of DCmodAppServerCommon.</param>
		static partial void CustomizeBackendConfiguration(ref BackendConfiguration config);
		
	}
	
	public interface IDCmodAppServerCommonUnitOfWork : IUnitOfWork
	{
		IQueryable<dbUtlsBlockedIpLST> dbUtlsBlockedIpLSTs
		{
			get;
		}
		IQueryable<dbSmtpConfigLST> dbSmtpConfigLSTs
		{
			get;
		}
		IQueryable<dbRntChnlHomeAwayManagerTBL> dbRntChnlHomeAwayManagerTBLs
		{
			get;
		}
	}
}
namespace ModAppServerCommon	
{
	[Table("UtlsBlockedIpLST")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Guid)]
	public partial class dbUtlsBlockedIpLST
	{
		private string ip1;
		[Column("ip", OpenAccessType = OpenAccessType.Varchar, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("ip1")]
		public virtual string ip
		{
			get
			{
				return this.ip1;
			}
			set
			{
				this.ip1 = value;
			}
		}
		
		private string actionType1;
		[Column("actionType", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("actionType1")]
		public virtual string actionType
		{
			get
			{
				return this.actionType1;
			}
			set
			{
				this.actionType1 = value;
			}
		}
		
		private string actionTo1;
		[Column("actionTo", OpenAccessType = OpenAccessType.Varchar, IsNullable = true, Length = 500, Scale = 0, SqlType = "varchar")]
		[Storage("actionTo1")]
		public virtual string actionTo
		{
			get
			{
				return this.actionTo1;
			}
			set
			{
				this.actionTo1 = value;
			}
		}
		
		private Guid uid1;
		[Column("uid", OpenAccessType = OpenAccessType.Guid, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "uniqueidentifier")]
		[Storage("uid1")]
		public virtual Guid uid
		{
			get
			{
				return this.uid1;
			}
			set
			{
				this.uid1 = value;
			}
		}
		
	}
}
namespace ModAppServerCommon	
{
	[Table("SmtpConfigLST")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Autoinc)]
	public partial class dbSmtpConfigLST
	{
		private Guid uid1;
		[Column("uid", OpenAccessType = OpenAccessType.Guid, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "uniqueidentifier")]
		[Storage("uid1")]
		public virtual Guid uid
		{
			get
			{
				return this.uid1;
			}
			set
			{
				this.uid1 = value;
			}
		}
		
		private string code1;
		[Column("code", OpenAccessType = OpenAccessType.StringVariableLength, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("code1")]
		public virtual string code
		{
			get
			{
				return this.code1;
			}
			set
			{
				this.code1 = value;
			}
		}
		
		private int sequence1;
		[Column("sequence", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("sequence1")]
		public virtual int sequence
		{
			get
			{
				return this.sequence1;
			}
			set
			{
				this.sequence1 = value;
			}
		}
		
		private bool isActive1;
		[Column("isActive", OpenAccessType = OpenAccessType.Bit, Length = 0, Scale = 0, SqlType = "bit")]
		[Storage("isActive1")]
		public virtual bool isActive
		{
			get
			{
				return this.isActive1;
			}
			set
			{
				this.isActive1 = value;
			}
		}
		
		private string SmtpHost1;
		[Column("SmtpHost", OpenAccessType = OpenAccessType.StringVariableLength, Length = 50, Scale = 0, SqlType = "varchar")]
		[Storage("SmtpHost1")]
		public virtual string SmtpHost
		{
			get
			{
				return this.SmtpHost1;
			}
			set
			{
				this.SmtpHost1 = value;
			}
		}
		
		private int SmtpPort1;
		[Column("SmtpPort", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("SmtpPort1")]
		public virtual int SmtpPort
		{
			get
			{
				return this.SmtpPort1;
			}
			set
			{
				this.SmtpPort1 = value;
			}
		}
		
		private bool SmtpSsl1;
		[Column("SmtpSsl", OpenAccessType = OpenAccessType.Bit, Length = 0, Scale = 0, SqlType = "bit")]
		[Storage("SmtpSsl1")]
		public virtual bool SmtpSsl
		{
			get
			{
				return this.SmtpSsl1;
			}
			set
			{
				this.SmtpSsl1 = value;
			}
		}
		
		private bool SmtpAuth1;
		[Column("SmtpAuth", OpenAccessType = OpenAccessType.Bit, Length = 0, Scale = 0, SqlType = "bit")]
		[Storage("SmtpAuth1")]
		public virtual bool SmtpAuth
		{
			get
			{
				return this.SmtpAuth1;
			}
			set
			{
				this.SmtpAuth1 = value;
			}
		}
		
		private string SmtpUsr1;
		[Column("SmtpUsr", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 50, Scale = 0, SqlType = "nvarchar")]
		[Storage("SmtpUsr1")]
		public virtual string SmtpUsr
		{
			get
			{
				return this.SmtpUsr1;
			}
			set
			{
				this.SmtpUsr1 = value;
			}
		}
		
		private string SmtpPwd1;
		[Column("SmtpPwd", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 50, Scale = 0, SqlType = "nvarchar")]
		[Storage("SmtpPwd1")]
		public virtual string SmtpPwd
		{
			get
			{
				return this.SmtpPwd1;
			}
			set
			{
				this.SmtpPwd1 = value;
			}
		}
		
	}
}
namespace ModAppServerCommon	
{
	[Table("RntChnlHomeAwayManagerTBL")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	public partial class dbRntChnlHomeAwayManagerTBL
	{
		private string id1;
		[Column("id", OpenAccessType = OpenAccessType.StringVariableLength, IsPrimaryKey = true, Length = 200, Scale = 0, SqlType = "varchar")]
		[Storage("id1")]
		public virtual string id
		{
			get
			{
				return this.id1;
			}
			set
			{
				this.id1 = value;
			}
		}
		
		private string assignedSystemId1;
		[Column("assignedSystemId", OpenAccessType = OpenAccessType.StringVariableLength, Length = 200, Scale = 0, SqlType = "varchar")]
		[Storage("assignedSystemId1")]
		public virtual string assignedSystemId
		{
			get
			{
				return this.assignedSystemId1;
			}
			set
			{
				this.assignedSystemId1 = value;
			}
		}
		
		private string authorizationToken1;
		[Column("authorizationToken", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("authorizationToken1")]
		public virtual string authorizationToken
		{
			get
			{
				return this.authorizationToken1;
			}
			set
			{
				this.authorizationToken1 = value;
			}
		}
		
		private string InquiryEndpointUrl1;
		[Column("InquiryEndpointUrl", OpenAccessType = OpenAccessType.UnicodeStringInfiniteLength, Length = 0, Scale = 0, SqlType = "nvarchar(max)")]
		[Storage("InquiryEndpointUrl1")]
		public virtual string InquiryEndpointUrl
		{
			get
			{
				return this.InquiryEndpointUrl1;
			}
			set
			{
				this.InquiryEndpointUrl1 = value;
			}
		}
		
		private int isDemo1;
		[Column("isDemo", OpenAccessType = OpenAccessType.Int32, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("isDemo1")]
		public virtual int isDemo
		{
			get
			{
				return this.isDemo1;
			}
			set
			{
				this.isDemo1 = value;
			}
		}
		
	}
}
#pragma warning restore 1591
